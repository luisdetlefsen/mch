using System;
using System.Data;
using System.Data.SqlClient;

namespace WindowsFormsApplication2
{
	public class Datos
	{
		#region Variables globales
		private static SqlConnection MiConexion;
		#endregion

		#region Métodos públicos

        /* ---------------------- Persona ---------------------- */
        public static void CrearPersona(string ps_Codigo, string ps_NombrePersona, string ps_CUI, string ps_NoRegistro, Int32 pi_NoCedula, int pi_Sexo, DateTime pd_Fecha, int pi_Comunidad, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                string sSexo = pi_Sexo.ToString();
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_CrearPersona", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@Codigo", SqlDbType.VarChar, 25, ps_Codigo));
                MiComando.Parameters.Add(ParametroEntrada("@vchrNombre", SqlDbType.VarChar, 225, ps_NombrePersona));
                MiComando.Parameters.Add(ParametroEntrada("@vchrCUI", SqlDbType.VarChar, 10, ps_CUI));
                MiComando.Parameters.Add(ParametroEntrada("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));
                if (pi_NoCedula >= 0)
                {
                    MiComando.Parameters.Add(ParametroEntrada("@intNo_Cedula", SqlDbType.Int, pi_NoCedula));
                }
                else
                {
                    MiComando.Parameters.Add(ParametroEntrada("@intNo_Cedula", SqlDbType.Int, null));
                }
                MiComando.Parameters.Add(ParametroEntrada("@Sexo", SqlDbType.VarChar, 1, sSexo));
                MiComando.Parameters.Add(ParametroEntrada("@Fecha_Nacimiento", SqlDbType.DateTime, pd_Fecha));
                MiComando.Parameters.Add(ParametroEntrada("@intID_Comunidad", SqlDbType.Int, pi_Comunidad));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                //MiComando.Parameters.Add(ParametroSalida("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));


                // Ejecución del stored procedure
                MiComando.ExecuteNonQuery();
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = -1;
            }
        }
        public static void ModificarPersona(Int32 pi_ID, string ps_Codigo, string ps_NombrePersona, string ps_CUI, string ps_NoRegistro, Int32 pi_NoCedula, string ps_Sexo, DateTime pd_Fecha, int pi_Comunidad, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;

                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_ModificarPersona", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@Codigo", SqlDbType.VarChar, 25, ps_Codigo));
                MiComando.Parameters.Add(ParametroEntrada("@ID_Persona", SqlDbType.Int, pi_ID));
                MiComando.Parameters.Add(ParametroEntrada("@vchrNombre", SqlDbType.VarChar, 225, ps_NombrePersona));
                MiComando.Parameters.Add(ParametroEntrada("@vchrCUI", SqlDbType.VarChar, 10, ps_CUI));
                MiComando.Parameters.Add(ParametroEntrada("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));
                if (pi_NoCedula >= 0)
                {
                    MiComando.Parameters.Add(ParametroEntrada("@intNo_Cedula", SqlDbType.Int, pi_NoCedula));
                }
                else
                {
                    MiComando.Parameters.Add(ParametroEntrada("@intNo_Cedula", SqlDbType.Int, null));
                }
                MiComando.Parameters.Add(ParametroEntrada("@Sexo", SqlDbType.VarChar, 1, ps_Sexo));
                MiComando.Parameters.Add(ParametroEntrada("@Fecha_Nacimiento", SqlDbType.DateTime, pd_Fecha));
                MiComando.Parameters.Add(ParametroEntrada("@intID_Comunidad", SqlDbType.Int, pi_Comunidad));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                //MiComando.Parameters.Add(ParametroSalida("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));


                // Ejecución del stored procedure
                MiComando.ExecuteNonQuery();
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = -1;
            }
        }
        public static void EliminarPersona(Int32 pi_ID, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;

                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_EliminarPersona", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@ID_Persona", SqlDbType.Int, pi_ID));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                //MiComando.Parameters.Add(ParametroSalida("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));


                // Ejecución del stored procedure
                MiComando.ExecuteNonQuery();
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = -1;
            }
        }
        public static void BuscarPersona(string ps_NombrePersona, ref string ps_Mensaje, ref Int32 pi_Resultado, ref DataTable dtTabla)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                SqlDataAdapter MiAdaptador;
                DataTable MiTabla;
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_BuscarPersona", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@vchrNombre", SqlDbType.VarChar, 225, ps_NombrePersona));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                //MiComando.Parameters.Add(ParametroSalida("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));
                MiTabla = new DataTable();
                MiAdaptador = new SqlDataAdapter(MiComando);
                MiAdaptador.Fill(MiTabla);
                // Ejecución del stored procedure
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                dtTabla = MiTabla;
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = -1;
            }
        }
        /*
        public static void BuscarPersonaPorID(Int32 pi_IDPersona, ref string ps_Mensaje, ref Int32 pi_Resultado, ref string ps_Nombre)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                SqlDataAdapter MiAdaptador;
                DataTable MiTabla;
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_BuscarPersona", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@intIDPersona", SqlDbType.Int, pi_IDPersona));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                //MiComando.Parameters.Add(ParametroSalida("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));
                MiTabla = new DataTable();
                MiAdaptador = new SqlDataAdapter(MiComando);
                MiAdaptador.Fill(MiTabla);
                // Ejecución del stored procedure
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                if (MiTabla.Rows.Count > 0 )
                {
                    ps_Nombre = MiTabla.Rows[0][1].ToString();
                }
                else
                {
                    ps_Nombre = "";
                }
                
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
            }
        }
        */

        /* ---------------------- Contador ---------------------- */
        public static void BuscarContador(string ps_CodigoContador, ref string ps_Mensaje, ref Int32 pi_Resultado, ref DataTable dtTabla)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                SqlDataAdapter MiAdaptador;
                DataTable MiTabla;
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_BuscarContador", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@ID_contador", SqlDbType.VarChar, 225, ps_CodigoContador));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                //MiComando.Parameters.Add(ParametroSalida("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));
                MiTabla = new DataTable();
                MiAdaptador = new SqlDataAdapter(MiComando);
                MiAdaptador.Fill(MiTabla);
                // Ejecución del stored procedure
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                dtTabla = MiTabla;
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
            }
        }
        //Obtener el monto a pagar
        public static DataTable getMonto(string ps_Contador,Int32 pi_Mes,Int32 pi_Año, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            try
            {
                DataTable Datos;
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                SqlDataAdapter MiAdaptador;
                DataTable MiTabla;
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_BuscarAbono", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@ID_contador", SqlDbType.VarChar, ps_Contador));
                MiComando.Parameters.Add(ParametroEntrada("@Mes", SqlDbType.Int, pi_Mes));
                MiComando.Parameters.Add(ParametroEntrada("@Año", SqlDbType.Int, pi_Año));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                MiTabla = new DataTable();
                MiAdaptador = new SqlDataAdapter(MiComando);
                MiAdaptador.Fill(MiTabla);
                // Ejecución del stored procedure
                pi_Resultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                Datos = MiTabla;

                return Datos;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
                return new DataTable();
            }
        }



        //Obtener reporte
        public static DataTable getReporteComunidades(int pi_Comunidad, Int32 pi_Mes, Int32 pi_Año, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            try
            {
                DataTable Datos;
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                SqlDataAdapter MiAdaptador;
                DataTable MiTabla;
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_reporte_comunidad", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@id_comunidad", SqlDbType.VarChar, pi_Comunidad));
                MiComando.Parameters.Add(ParametroEntrada("@mes", SqlDbType.Int, pi_Mes));
                MiComando.Parameters.Add(ParametroEntrada("@año", SqlDbType.Int, pi_Año));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                MiTabla = new DataTable();
                MiAdaptador = new SqlDataAdapter(MiComando);
                MiAdaptador.Fill(MiTabla);
                // Ejecución del stored procedure
                pi_Resultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                Datos = MiTabla;

                return Datos;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
                return new DataTable();
            }
        }

        public static DataTable getEstadoCuenta(int pi_contador, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            try
            {
                DataTable Datos;
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                SqlDataAdapter MiAdaptador;
                DataTable MiTabla;
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_estado_cuenta", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@contador", SqlDbType.Int, pi_contador));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                MiTabla = new DataTable();
                MiAdaptador = new SqlDataAdapter(MiComando);
                MiAdaptador.Fill(MiTabla);
                // Ejecución del stored procedure
                pi_Resultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                Datos = MiTabla;

                return Datos;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
                return new DataTable();
            }
        }


        public static DataTable getComunidades(Int32 pi_CodigoHidroelecdtrica, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            try
            {
                DataTable ldt_comunidades;
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                SqlDataAdapter MiAdaptador;
                DataTable MiTabla;
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_GetComunidades", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@ID_comunidad", SqlDbType.Int, pi_CodigoHidroelecdtrica));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                //MiComando.Parameters.Add(ParametroSalida("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));
                MiTabla = new DataTable();
                MiAdaptador = new SqlDataAdapter(MiComando);
                MiAdaptador.Fill(MiTabla);
                // Ejecución del stored procedure
                pi_Resultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                ldt_comunidades = MiTabla;

                return ldt_comunidades;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
                return new DataTable();
            }
        }

        /*MODIFICACIONES CONTADOR PARTE 2*/
        public static DataTable getTipoServicio(ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            try
            {
                DataTable ldt_tipoServicio;
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                SqlDataAdapter MiAdaptador;
                DataTable MiTabla;
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_GetTipoServicio", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                //MiComando.Parameters.Add(ParametroSalida("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));
                MiTabla = new DataTable();
                MiAdaptador = new SqlDataAdapter(MiComando);
                MiAdaptador.Fill(MiTabla);
                // Ejecución del stored procedure
                pi_Resultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                ldt_tipoServicio = MiTabla;

                return ldt_tipoServicio;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
                return new DataTable();
            }
        }
        public static void CrearContador(string ps_NoContador, string psDireccion, string psNoPoste, Int32 pi_Comunidad, Int32 pi_tipoServicio, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;

                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_CrearContador", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@vchrCodigo", SqlDbType.VarChar, 100, ps_NoContador));
                MiComando.Parameters.Add(ParametroEntrada("@vchrDireccion", SqlDbType.VarChar, 255, psDireccion));
                MiComando.Parameters.Add(ParametroEntrada("@vchrNo_Poste", SqlDbType.VarChar, 45, psNoPoste));
                MiComando.Parameters.Add(ParametroEntrada("@intNo_Comunidad", SqlDbType.Int, pi_Comunidad.ToString()));
                MiComando.Parameters.Add(ParametroEntrada("@intTipoServicio", SqlDbType.Int, pi_tipoServicio.ToString()));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;

                // Ejecución del stored procedure
                MiComando.ExecuteNonQuery();
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
            }
        }
        public static void ModificarContador(string ps_NoContador, string psDireccion, string psNoPoste, Int32 pi_Comunidad, Int32 pi_tipoServicio, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;

                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_ModificarContador", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@vchrCodigo", SqlDbType.VarChar, 100, ps_NoContador));
                MiComando.Parameters.Add(ParametroEntrada("@vchrDireccion", SqlDbType.VarChar, 225, psDireccion));
                MiComando.Parameters.Add(ParametroEntrada("@vchrNo_Poste", SqlDbType.VarChar, 45, psNoPoste));
                MiComando.Parameters.Add(ParametroEntrada("@intNo_Comunidad", SqlDbType.Int, pi_Comunidad.ToString()));
                MiComando.Parameters.Add(ParametroEntrada("@intTipo_servicio", SqlDbType.Int, pi_tipoServicio.ToString()));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                // Ejecución del stored procedure
                MiComando.ExecuteNonQuery();
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
            }
        }
        
        public static void EliminarContador(string ps_NoContador, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;

                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_EliminarContador", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@ID_Contador", SqlDbType.VarChar, 100, ps_NoContador));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                //MiComando.Parameters.Add(ParametroSalida("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));


                // Ejecución del stored procedure
                MiComando.ExecuteNonQuery();
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
            }
        }

        /* ---------------------- Parametros ---------------------- */
        public static void MostrarParametros(ref string ps_Mensaje, ref Int32 pi_Resultado, ref DataTable dtTabla)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                SqlDataAdapter MiAdaptador;
                DataTable MiTabla;
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_Mostrar_Parametros", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros                
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;

                MiTabla = new DataTable();
                MiAdaptador = new SqlDataAdapter(MiComando);
                MiAdaptador.Fill(MiTabla);
                // Ejecución del stored procedure
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                dtTabla = MiTabla;
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
            }
        }
        public static void InsertarParametro(Int32 pi_idParametro, Int32 pi_tipParametro, string ps_parametro, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;

                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_Insertar_Parametro", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros  
                MiComando.Parameters.Add(ParametroEntrada("@id_parametro_actual", SqlDbType.Int, pi_idParametro));
                MiComando.Parameters.Add(ParametroEntrada("@tip_parametro", SqlDbType.Int, pi_tipParametro));
                MiComando.Parameters.Add(ParametroEntrada("@parametro_nuevo", SqlDbType.VarChar, 225, ps_parametro));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;

                MiComando.ExecuteNonQuery();
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
            }
        }

        /* ---------------------- Parametros ---------------------- */
        public static void BuscarAyudaIndividual(string ps_TipoOperacion, string ps_Registro, ref string ps_Mensaje, ref Int32 pi_Resultado, ref DataTable dtTabla)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                SqlDataAdapter MiAdaptador;
                DataTable MiTabla;
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_BuscarAyuda", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@chrOperacion", SqlDbType.Char, 1, ps_TipoOperacion));
                MiComando.Parameters.Add(ParametroEntrada("@vchrRegistro", SqlDbType.VarChar, 50, ps_Registro));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                MiTabla = new DataTable();
                MiAdaptador = new SqlDataAdapter(MiComando);
                MiAdaptador.Fill(MiTabla);
                // Ejecución del stored procedure
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                dtTabla = MiTabla;
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
            }
        }
        public static void BuscarAyudaTabla(string ps_TipoOperacion, ref string ps_Mensaje, ref Int32 pi_Resultado, ref DataTable dtTabla)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                SqlDataAdapter MiAdaptador;
                DataTable MiTabla;
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_BuscarAyuda", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@chrOperacion", SqlDbType.Char, 1, ps_TipoOperacion));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                MiTabla = new DataTable();
                MiAdaptador = new SqlDataAdapter(MiComando);
                MiAdaptador.Fill(MiTabla);
                // Ejecución del stored procedure
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                dtTabla = MiTabla;
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
            }
        }

        /*------------------------Contraseña----------------------- */
        public static void IngresarPassword(string ps_password, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;

                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_Comparar_Password", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros  
                MiComando.Parameters.Add(ParametroEntrada("@password", SqlDbType.VarChar, 30, ps_password));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;

                MiComando.ExecuteNonQuery();
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = -1;
            }
        }
        public static void CambiarPassword(string ps_password_actual, string ps_password_nuevo, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;

                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_Cambiar_Password", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros  
                MiComando.Parameters.Add(ParametroEntrada("@password_actual", SqlDbType.VarChar, 30, ps_password_actual));
                MiComando.Parameters.Add(ParametroEntrada("@password_nuevo", SqlDbType.VarChar, 30, ps_password_nuevo));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;

                MiComando.ExecuteNonQuery();
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = -1;
            }
        }

        /* ----------------- Copia Seguridad ------------------- */

        public static void GenerarCopiaSeguridad(string ps_Ruta, ref Int32 pi_Resultado)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;

                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_GenerarBackup", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametro
                MiComando.Parameters.Add(ParametroEntrada("@vchrUbicacion", SqlDbType.VarChar, 1000, ps_Ruta));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                //MiComando.Parameters.Add(ParametroSalida("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));

                // Ejecución del stored procedure
                MiComando.ExecuteNonQuery();
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                pi_Resultado = 0;
            }
        }
        /*-----------------Lecturas-------------------------*/
        public static void GetDatosLectura(string ps_CodigoContador, ref string ps_Mensaje, ref Int32 pi_Resultado, ref DataTable dtTabla)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                SqlDataAdapter MiAdaptador;
                DataTable MiTabla;
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_GetDatosLectura", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@NO_contador", SqlDbType.VarChar, 225, ps_CodigoContador));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                //MiComando.Parameters.Add(ParametroSalida("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));
                MiTabla = new DataTable();
                MiAdaptador = new SqlDataAdapter(MiComando);
                MiAdaptador.Fill(MiTabla);
                // Ejecución del stored procedure
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                dtTabla = MiTabla;
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
            }
        }

        public static DataTable getTipCargoAbono(ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            try
            {
                DataTable ldt_tipCargoAbono;
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                SqlDataAdapter MiAdaptador;
                DataTable MiTabla;
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_GetTipCargoAbono", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                //MiComando.Parameters.Add(ParametroSalida("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));
                MiTabla = new DataTable();
                MiAdaptador = new SqlDataAdapter(MiComando);
                MiAdaptador.Fill(MiTabla);
                // Ejecución del stored procedure
                pi_Resultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                ldt_tipCargoAbono = MiTabla;

                return ldt_tipCargoAbono;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
                return new DataTable();
            }
        }

        public static DataTable getLecturaMes(string psContrato, DateTime pdtFechaLectura, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            try
            {
                DataTable ldt_tipCargoAbono;
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                SqlDataAdapter MiAdaptador;
                DataTable MiTabla;
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_GetLecturaMes", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@NO_CONTRATO", SqlDbType.VarChar, 225, psContrato));
                MiComando.Parameters.Add(ParametroEntrada("@FECHA_LECTURA", SqlDbType.DateTime, pdtFechaLectura));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                //MiComando.Parameters.Add(ParametroSalida("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));
                MiTabla = new DataTable();
                MiAdaptador = new SqlDataAdapter(MiComando);
                MiAdaptador.Fill(MiTabla);
                // Ejecución del stored procedure
                pi_Resultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                ldt_tipCargoAbono = MiTabla;

                return ldt_tipCargoAbono;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
                return new DataTable();
            }
        }

        public static void InsertarLectura(string psContrato, DateTime pdtFechaLectura, int piLectura, int piTipCargoAbono, double pdMonto, string psDescripcion, int piInsertarCuotaFija, int piTipoCargoAbonoFija, double pdMontoFija, string psDescripcionFija, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;

                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_InsertarLectura", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros  
                MiComando.Parameters.Add(ParametroEntrada("@NO_CONTRATO", SqlDbType.VarChar, 225, psContrato));
                MiComando.Parameters.Add(ParametroEntrada("@FECHA_LECTURA", SqlDbType.DateTime, pdtFechaLectura));
                MiComando.Parameters.Add(ParametroEntrada("@LECTURA", SqlDbType.Int, piLectura));
                MiComando.Parameters.Add(ParametroEntrada("@TIP_CARGO_ABONO", SqlDbType.Int, piTipCargoAbono));
                MiComando.Parameters.Add(ParametroEntrada("@MONTO", SqlDbType.Decimal, pdMonto));
                MiComando.Parameters.Add(ParametroEntrada("@DESCRIPCION", SqlDbType.VarChar, 255, psDescripcion));
                MiComando.Parameters.Add(ParametroEntrada("@INSERTAR_CUOTA_FIJA", SqlDbType.Int, piInsertarCuotaFija));
                MiComando.Parameters.Add(ParametroEntrada("@TIP_CARGO_ABONO_FIJA", SqlDbType.Int, piTipoCargoAbonoFija));
                MiComando.Parameters.Add(ParametroEntrada("@MONTO_FIJA", SqlDbType.Decimal, pdMontoFija));
                MiComando.Parameters.Add(ParametroEntrada("@DESCRIPCION_CUOTA_FIJA", SqlDbType.VarChar, 255, psDescripcionFija));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;

                MiComando.ExecuteNonQuery();
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = 0;
            }
        }
        /*-----------------Fin Lecturas-------------------------*/


        /*------------------ Pagos -------------------------------*/

        public static void BuscarPagosPendientes(string ps_IDContador, ref string ps_Mensaje, ref Int32 pi_Resultado, ref DataTable dtTabla)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;
                SqlDataAdapter MiAdaptador;
                DataTable MiTabla;
                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_pago_pendiente", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@id_contador", SqlDbType.VarChar, 100, ps_IDContador));
                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;
                //MiComando.Parameters.Add(ParametroSalida("@vchrNo_Registro", SqlDbType.VarChar, 3, ps_NoRegistro));
                MiTabla = new DataTable();
                MiAdaptador = new SqlDataAdapter(MiComando);
                MiAdaptador.Fill(MiTabla);
                // Ejecución del stored procedure
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                dtTabla = MiTabla;
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = -1;
            }
        }

        public static void RealizarPago(string pd_Monto, string ps_Lectura, ref string ps_Mensaje, ref Int32 pi_Resultado)
        {
            int iResultado;
            try
            {
                // Se conecta  base de datos
                Conectar();

                // Declaración de varables locales
                SqlCommand MiComando;

                // Inicialización del stored procedure
                MiComando = new SqlCommand("sp_pago_lectura", MiConexion);
                MiComando.CommandType = CommandType.StoredProcedure;

                // Inicialización de parametros
                MiComando.Parameters.Add(ParametroEntrada("@id_lectura", SqlDbType.Int, ps_Lectura));
                MiComando.Parameters.Add(ParametroEntrada("@monto", SqlDbType.Decimal, pd_Monto));

                SqlParameter Retorno = MiComando.Parameters.Add(new SqlParameter("@Return", SqlDbType.Int));
                Retorno.Direction = ParameterDirection.ReturnValue;


                // Ejecución del stored procedure
                MiComando.ExecuteNonQuery();
                iResultado = Convert.ToInt16(Retorno.Value);
                // Se desconecta de la base de datos
                Desconectar();
                pi_Resultado = iResultado;
            }
            catch (Exception E)
            {
                ps_Mensaje = E.Message;
                pi_Resultado = -1;
            }
        }
        /*------------------ Fin Pagos -------------------------------*/

		#endregion

		#region Métodos privados
		private static void Conectar()
		{
            Conectar("server=teclabsoft2;Integrated Security=SSPI;database=MCH");
		}

		private static void Conectar(string pConnectionString)
		{
			MiConexion = new SqlConnection(pConnectionString);
			MiConexion.Open();
		}

		private static void Desconectar()
		{
			MiConexion.Close();
		}

		private static SqlParameter ParametroEntrada(string pNombre, SqlDbType pType, int pLongitud, object pValor)
		{
			SqlParameter MiParametro;

			if (pLongitud >= 0)
				MiParametro = new SqlParameter(pNombre, pType, pLongitud);
			else
				MiParametro = new SqlParameter(pNombre, pType);
			
			MiParametro.Value = pValor;

			return MiParametro;
		}

		private static SqlParameter ParametroEntrada(string pNombre, SqlDbType pType, object pValor)
		{
			return ParametroEntrada(pNombre, pType, -1, pValor);
		}

		private static SqlParameter ParametroSalida(string pNombre, SqlDbType pType, int pLongitud)
		{
			SqlParameter MiParametro;

			if (pLongitud >= 0)
				MiParametro = new SqlParameter(pNombre, pType, pLongitud);
			else
				MiParametro = new SqlParameter(pNombre, pType);
			
			MiParametro.Direction = ParameterDirection.Output;

			return MiParametro;
		}

		private static SqlParameter ParametroSalida(string pNombre, SqlDbType pType)
		{
			return ParametroSalida(pNombre, pType, -1);
		}

		#endregion

	}
}
